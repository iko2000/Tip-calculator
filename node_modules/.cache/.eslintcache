[{"C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\tipdivisions.js":"3","C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\inputcomps.js":"4"},{"size":257,"mtime":1682421907002,"results":"5","hashOfConfig":"6"},{"size":6445,"mtime":1682961133604,"results":"7","hashOfConfig":"6"},{"size":298,"mtime":1682960718284,"results":"8","hashOfConfig":"6"},{"size":147,"mtime":1682597107992,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"6203pq",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\index.js",[],[],[],"C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\App.js",["25","26","27","28","29"],[],"import React, { useState, useTransition } from \"react\";\nimport TipDivs from \"./tipdivisions.js\";\nimport InpComps from \"./inputcomps.js\";\nimport { useEffect } from \"react\";\nfunction App() {\n  // const [tip, setTip] = useState(0);\n  const [color, setColor] = useState(\"hsl(183, 100%, 15%)\");\n  const [bill, setBill] = useState(0);\n  const [people, setPeople] = useState(5);\n  const [percen, setPercent] = useState(0.05);\n  const [startbill, setStartBill] = useState(150);\n  const [activeStatus, setStatus] = useState({\n    first: true,\n    second: false,\n    third: false,\n    fourth: false,\n    fifth: false,\n  }\n    \n\n  )\n\n  \n  useEffect(() => {\n    updater();\n  }, [startbill, bill, people, percen]);\n    \n\n\n    function changeHandler(e) {\n      e.target.style.backgroundColor = \"purple\";\n     \n    }\n\n  \n\n  // console.log(\"200\" + \"200\" * 0.05)\n  let tip = (startbill * percen) / people;\n  let total = (startbill / people) + tip;\n  function updater() {\n    setBill(Math.round(total.toFixed(2)));\n  }\n\n  return (\n    <div className=\"mainDiv\">\n      <div className=\"box\">\n        <div className=\"keys\">\n          <div className=\"screen\">\n            <div className=\"bill\">\n              <form>\n                <label>Bill</label>\n                <input\n                  type=\"number\"\n                  value={startbill}\n                  onChange={(e) => {\n                    setStartBill(Number(e.target.value));\n                    updater();\n                    console.log(\"here\");\n                  }}\n                  className=\"inputone\"\n                  placeholder=\"$\"\n                ></input>\n              </form>\n            </div>\n            <div className=\"tipAmount\">\n              <label>Select Tip % </label>\n              <div className=\"positioner\">\n                <TipDivs class={activeStatus.first ? \"active\" : \"tipDiv\"}\n               \n                \n                  active={(e) => {\n                    setStatus({\n                      first: true,\n                      second: false,\n                      third: false,\n                      fourth: false,\n                      fifth: false,\n                    })\n                    setPercent(0.05);\n                  }}\n                  amount={5}\n                />\n                <TipDivs class={activeStatus.second ? \"active\" : \"tipDiv\"}\n                \n                  active={(e) => {\n                   \n                    setStatus({\n                      first: false,\n                      second: true,\n                      third: false,\n                      fourth: false,\n                      fifth: false,\n                    })\n                    setPercent(0.1);\n                   \n                  }}\n                  amount={10}\n                />\n                <TipDivs  class={activeStatus.third ? \"active\" : \"tipDiv\"}\n                \n                  active={(e) => {\n                    setStatus({\n                      first: false,\n                      second: false,\n                      third: true,\n                      fourth: false,\n                      fifth: false,\n                    })\n                   \n                    setPercent(0.2);\n                  }}\n                  amount={20}\n                />\n                <TipDivs class={activeStatus.fourth ? \"active\" : \"tipDiv\"}\n                \n                  active={(e) => {\n                    setStatus({\n                      first: false,\n                      second: false,\n                      third: false,\n                      fourth: true,\n                      fifth: false,\n                    })\n                   \n                    setPercent(0.25);\n                  }}\n                  amount={25}\n                />\n                <TipDivs  class={activeStatus.fifth ? \"active\" : \"tipDiv\"}\n                 \n                  active={(e) => {\n                    setStatus({\n                      first: false,\n                      second: false,\n                      third: false,\n                      fourth: false,\n                      fifth: true,\n                    })\n                   \n                    setPercent(0.5);\n                  }}\n                  amount={50}\n                />\n                <input\n                  placeholder=\"Custom\"\n                  onChange={(e) => {\n                    setPercent(Number(e.target.value) / 100);\n                    updater();\n                    setStatus({\n                      first: false,\n                      second: false,\n                      third: false,\n                      fourth: false,\n                      fifth: false,\n                    })\n                  }}\n                  className=\"extra\"\n                />\n              </div>\n            </div>\n            <div className=\"people\">\n              <form>\n                <label>Number Of People</label>\n                <input\n                 value={people}\n                  type=\"number\"\n                  onChange={(e) => {\n                    console.log(\"active\");\n                    setPeople(Number(e.target.value));\n                    updater();\n                  }}\n                  className=\"inputtwo\"\n                  placeholder=\"\"\n                ></input>\n              </form>\n            </div>\n          </div>\n        </div>\n        <div className=\"display\">\n          <div className=\"sc\">\n            <div className=\"screenparts\">\n              <div className=\"amount\">\n                <div className=\"screenLables\">\n                  <p>\n                    Tip amount <span>/ Person</span>\n                  </p>\n                </div>\n\n                <InpComps value={Math.round(tip.toFixed(8))} />\n              </div>\n              <div className=\"total\">\n                <div className=\"screenLables\">\n                  <p>\n                    Total <span>/ Person</span>\n                  </p>\n                </div>\n                <InpComps value={Math.round(bill.toFixed(4))} />\n              </div>\n            </div>\n            <div className=\"screenbtn\">\n              <button\n                onClick={() => {\n                  setPeople(5);\n                \n                  setStartBill(150);\n                }}\n                className=\"resetBtn\"\n              >\n                RESET\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\tipdivisions.js",["30","31"],[],"import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n let TipDivs = function(props) {\r\n    \r\n     \r\n    \r\n\r\n    return (\r\n        <button type='submit' name=\"tip\"  onClick={props.active}  className={props.class}>{props.amount} %</button>\r\n    )\r\n}\r\n\r\n\r\nexport default TipDivs;","C:\\Users\\Administrator\\Desktop\\React\\lesson-3\\src\\inputcomps.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":1,"column":27,"nodeType":"34","messageId":"35","endLine":1,"endColumn":40},{"ruleId":"32","severity":1,"message":"36","line":7,"column":10,"nodeType":"34","messageId":"35","endLine":7,"endColumn":15},{"ruleId":"32","severity":1,"message":"37","line":7,"column":17,"nodeType":"34","messageId":"35","endLine":7,"endColumn":25},{"ruleId":"38","severity":1,"message":"39","line":26,"column":6,"nodeType":"40","endLine":26,"endColumn":39,"suggestions":"41"},{"ruleId":"32","severity":1,"message":"42","line":30,"column":14,"nodeType":"34","messageId":"35","endLine":30,"endColumn":27},{"ruleId":"32","severity":1,"message":"43","line":1,"column":10,"nodeType":"34","messageId":"35","endLine":1,"endColumn":18},{"ruleId":"32","severity":1,"message":"44","line":2,"column":10,"nodeType":"34","messageId":"35","endLine":2,"endColumn":19},"no-unused-vars","'useTransition' is defined but never used.","Identifier","unusedVar","'color' is assigned a value but never used.","'setColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updater'. Either include it or remove the dependency array.","ArrayExpression",["45"],"'changeHandler' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",{"desc":"46","fix":"47"},"Update the dependencies array to be: [startbill, bill, people, percen, updater]",{"range":"48","text":"49"},[666,699],"[startbill, bill, people, percen, updater]"]